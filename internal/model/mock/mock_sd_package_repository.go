// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luckyAkbar/atec-api/internal/model (interfaces: SDPackageRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/luckyAkbar/atec-api/internal/model"
	gorm "gorm.io/gorm"
)

// MockSDPackageRepository is a mock of SDPackageRepository interface.
type MockSDPackageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSDPackageRepositoryMockRecorder
}

// MockSDPackageRepositoryMockRecorder is the mock recorder for MockSDPackageRepository.
type MockSDPackageRepositoryMockRecorder struct {
	mock *MockSDPackageRepository
}

// NewMockSDPackageRepository creates a new mock instance.
func NewMockSDPackageRepository(ctrl *gomock.Controller) *MockSDPackageRepository {
	mock := &MockSDPackageRepository{ctrl: ctrl}
	mock.recorder = &MockSDPackageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSDPackageRepository) EXPECT() *MockSDPackageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSDPackageRepository) Create(arg0 context.Context, arg1 *model.SpeechDelayPackage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSDPackageRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSDPackageRepository)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockSDPackageRepository) Delete(arg0 context.Context, arg1 uuid.UUID) (*model.SpeechDelayPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*model.SpeechDelayPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockSDPackageRepositoryMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSDPackageRepository)(nil).Delete), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockSDPackageRepository) FindByID(arg0 context.Context, arg1 uuid.UUID, arg2 bool) (*model.SpeechDelayPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.SpeechDelayPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockSDPackageRepositoryMockRecorder) FindByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockSDPackageRepository)(nil).FindByID), arg0, arg1, arg2)
}

// FindLeastUsedPackageIDByUserID mocks base method.
func (m *MockSDPackageRepository) FindLeastUsedPackageIDByUserID(arg0 context.Context, arg1 uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindLeastUsedPackageIDByUserID", arg0, arg1)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindLeastUsedPackageIDByUserID indicates an expected call of FindLeastUsedPackageIDByUserID.
func (mr *MockSDPackageRepositoryMockRecorder) FindLeastUsedPackageIDByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindLeastUsedPackageIDByUserID", reflect.TypeOf((*MockSDPackageRepository)(nil).FindLeastUsedPackageIDByUserID), arg0, arg1)
}

// FindRandomActivePackage mocks base method.
func (m *MockSDPackageRepository) FindRandomActivePackage(arg0 context.Context) (*model.SpeechDelayPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRandomActivePackage", arg0)
	ret0, _ := ret[0].(*model.SpeechDelayPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRandomActivePackage indicates an expected call of FindRandomActivePackage.
func (mr *MockSDPackageRepositoryMockRecorder) FindRandomActivePackage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRandomActivePackage", reflect.TypeOf((*MockSDPackageRepository)(nil).FindRandomActivePackage), arg0)
}

// Search mocks base method.
func (m *MockSDPackageRepository) Search(arg0 context.Context, arg1 *model.SearchSDPackageInput) ([]*model.SpeechDelayPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Search", arg0, arg1)
	ret0, _ := ret[0].([]*model.SpeechDelayPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Search indicates an expected call of Search.
func (mr *MockSDPackageRepositoryMockRecorder) Search(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Search", reflect.TypeOf((*MockSDPackageRepository)(nil).Search), arg0, arg1)
}

// UndoDelete mocks base method.
func (m *MockSDPackageRepository) UndoDelete(arg0 context.Context, arg1 uuid.UUID) (*model.SpeechDelayPackage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UndoDelete", arg0, arg1)
	ret0, _ := ret[0].(*model.SpeechDelayPackage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UndoDelete indicates an expected call of UndoDelete.
func (mr *MockSDPackageRepositoryMockRecorder) UndoDelete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UndoDelete", reflect.TypeOf((*MockSDPackageRepository)(nil).UndoDelete), arg0, arg1)
}

// Update mocks base method.
func (m *MockSDPackageRepository) Update(arg0 context.Context, arg1 *model.SpeechDelayPackage, arg2 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSDPackageRepositoryMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSDPackageRepository)(nil).Update), arg0, arg1, arg2)
}
