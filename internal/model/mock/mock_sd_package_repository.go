// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luckyAkbar/atec-api/internal/model (interfaces: SDPackageRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/luckyAkbar/atec-api/internal/model"
)

// MockSDPackageRepository is a mock of SDPackageRepository interface.
type MockSDPackageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockSDPackageRepositoryMockRecorder
}

// MockSDPackageRepositoryMockRecorder is the mock recorder for MockSDPackageRepository.
type MockSDPackageRepositoryMockRecorder struct {
	mock *MockSDPackageRepository
}

// NewMockSDPackageRepository creates a new mock instance.
func NewMockSDPackageRepository(ctrl *gomock.Controller) *MockSDPackageRepository {
	mock := &MockSDPackageRepository{ctrl: ctrl}
	mock.recorder = &MockSDPackageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSDPackageRepository) EXPECT() *MockSDPackageRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSDPackageRepository) Create(arg0 context.Context, arg1 *model.SpeechDelayPackage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSDPackageRepositoryMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSDPackageRepository)(nil).Create), arg0, arg1)
}
