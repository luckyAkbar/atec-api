// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luckyAkbar/atec-api/internal/model (interfaces: AuthUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	common "github.com/luckyAkbar/atec-api/internal/common"
	model "github.com/luckyAkbar/atec-api/internal/model"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// LogIn mocks base method.
func (m *MockAuthUsecase) LogIn(arg0 context.Context, arg1 *model.LogInInput) (*model.LogInOutput, *common.Error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogIn", arg0, arg1)
	ret0, _ := ret[0].(*model.LogInOutput)
	ret1, _ := ret[1].(*common.Error)
	return ret0, ret1
}

// LogIn indicates an expected call of LogIn.
func (mr *MockAuthUsecaseMockRecorder) LogIn(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogIn", reflect.TypeOf((*MockAuthUsecase)(nil).LogIn), arg0, arg1)
}

// LogOut mocks base method.
func (m *MockAuthUsecase) LogOut(arg0 context.Context, arg1 *model.LogOutInput) *common.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogOut", arg0, arg1)
	ret0, _ := ret[0].(*common.Error)
	return ret0
}

// LogOut indicates an expected call of LogOut.
func (mr *MockAuthUsecaseMockRecorder) LogOut(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogOut", reflect.TypeOf((*MockAuthUsecase)(nil).LogOut), arg0, arg1)
}
