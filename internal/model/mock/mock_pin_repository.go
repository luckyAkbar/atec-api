// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luckyAkbar/atec-api/internal/model (interfaces: PinRepository)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/luckyAkbar/atec-api/internal/model"
	gorm "gorm.io/gorm"
)

// MockPinRepository is a mock of PinRepository interface.
type MockPinRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPinRepositoryMockRecorder
}

// MockPinRepositoryMockRecorder is the mock recorder for MockPinRepository.
type MockPinRepositoryMockRecorder struct {
	mock *MockPinRepository
}

// NewMockPinRepository creates a new mock instance.
func NewMockPinRepository(ctrl *gomock.Controller) *MockPinRepository {
	mock := &MockPinRepository{ctrl: ctrl}
	mock.recorder = &MockPinRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPinRepository) EXPECT() *MockPinRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPinRepository) Create(arg0 context.Context, arg1 *model.Pin, arg2 *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockPinRepositoryMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPinRepository)(nil).Create), arg0, arg1, arg2)
}

// DecrementRemainingAttempts mocks base method.
func (m *MockPinRepository) DecrementRemainingAttempts(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementRemainingAttempts", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementRemainingAttempts indicates an expected call of DecrementRemainingAttempts.
func (mr *MockPinRepositoryMockRecorder) DecrementRemainingAttempts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementRemainingAttempts", reflect.TypeOf((*MockPinRepository)(nil).DecrementRemainingAttempts), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockPinRepository) FindByID(arg0 context.Context, arg1 uuid.UUID) (*model.Pin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0, arg1)
	ret0, _ := ret[0].(*model.Pin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockPinRepositoryMockRecorder) FindByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockPinRepository)(nil).FindByID), arg0, arg1)
}
