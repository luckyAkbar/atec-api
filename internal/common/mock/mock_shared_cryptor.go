// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/luckyAkbar/atec-api/internal/common (interfaces: SharedCryptor)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSharedCryptor is a mock of SharedCryptor interface.
type MockSharedCryptor struct {
	ctrl     *gomock.Controller
	recorder *MockSharedCryptorMockRecorder
}

// MockSharedCryptorMockRecorder is the mock recorder for MockSharedCryptor.
type MockSharedCryptorMockRecorder struct {
	mock *MockSharedCryptor
}

// NewMockSharedCryptor creates a new mock instance.
func NewMockSharedCryptor(ctrl *gomock.Controller) *MockSharedCryptor {
	mock := &MockSharedCryptor{ctrl: ctrl}
	mock.recorder = &MockSharedCryptorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSharedCryptor) EXPECT() *MockSharedCryptorMockRecorder {
	return m.recorder
}

// CompareHash mocks base method.
func (m *MockSharedCryptor) CompareHash(arg0, arg1 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CompareHash", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CompareHash indicates an expected call of CompareHash.
func (mr *MockSharedCryptorMockRecorder) CompareHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CompareHash", reflect.TypeOf((*MockSharedCryptor)(nil).CompareHash), arg0, arg1)
}

// CreateSecureToken mocks base method.
func (m *MockSharedCryptor) CreateSecureToken() (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecureToken")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateSecureToken indicates an expected call of CreateSecureToken.
func (mr *MockSharedCryptorMockRecorder) CreateSecureToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecureToken", reflect.TypeOf((*MockSharedCryptor)(nil).CreateSecureToken))
}

// Decrypt mocks base method.
func (m *MockSharedCryptor) Decrypt(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockSharedCryptorMockRecorder) Decrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockSharedCryptor)(nil).Decrypt), arg0)
}

// Encrypt mocks base method.
func (m *MockSharedCryptor) Encrypt(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockSharedCryptorMockRecorder) Encrypt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockSharedCryptor)(nil).Encrypt), arg0)
}

// Hash mocks base method.
func (m *MockSharedCryptor) Hash(arg0 []byte) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockSharedCryptorMockRecorder) Hash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockSharedCryptor)(nil).Hash), arg0)
}
